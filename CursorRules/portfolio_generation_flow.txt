## Understanding the Portfolio Generation Flow

This document explains the roles of different parts of the codebase involved in generating the static portfolio websites.

**1. `templates/` (Root Directory): The Blueprints**

*   Contains the **source code** for each portfolio template (`template1/`, `template2/`, etc.).
*   Each template folder has the base `index.html`, `css/styles.css`, and `js/script.js` files.
*   These files act as the **initial skeleton or blueprint** for a portfolio's design and structure.
*   They contain basic HTML structure and placeholders (like `{{fullName}}`, `{{#each skills}}`) that will be filled with data.
*   **Crucial:** This folder is required for the generation process to start. Deleting it will break portfolio generation.

**2. `app/api/portfolios/generate/route.ts`: The Factory / Generator**

*   This is the **core script** responsible for building the final portfolio HTML.
*   **Reads** the base template files (HTML, CSS, JS) from the corresponding `templates/[templateId]/` directory.
*   Performs **simple placeholder replacement** (e.g., `{{fullName}}` -> "John Doe").
*   **Crucially, it also dynamically generates significant portions of HTML, CSS, and JavaScript** within the script itself, especially for:
    *   Data-driven sections (like iterating through skills or projects to create cards).
    *   Complex, template-specific features (e.g., unique animations, layouts, button logic for different templates).
*   This dynamically generated code is often **injected into** the base HTML, frequently **replacing** entire sections (like `<section id="skills">...`) from the original template file.
*   **Source of Truth for Dynamic Features:** For features built dynamically within this script, the code in `route.ts` is the effective source code. Changes to these features *must* be made here.
*   Finally, it **inlines** the base CSS and JS into `<style>` and `<script>` tags in the final HTML.

**3. `public/portfolios/`: The Finished Products**

*   This directory stores the **final, generated, static `index.html` files**.
*   Each subfolder (`[portfolioId]/`) contains the complete, self-contained website for one specific portfolio.
*   These are the actual files served to end-users visiting the portfolio URLs.
*   **Modifying files here is temporary and ineffective** for long-term changes, as they will be overwritten the next time the portfolio is regenerated by `route.ts`.

**Why Changes Are Often Made in `route.ts`:**

*   Because `route.ts` *dynamically generates* the code for many complex features, modifying the base `templates/` files won't affect those features (as `route.ts` might replace that section entirely).
*   The logic that *builds* the feature resides in `route.ts`, so changes must be made there to affect all future generations of portfolios using that template. 